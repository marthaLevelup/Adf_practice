{
	"name": "df_hospitals_admi",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hosp_admi",
						"type": "DatasetReference"
					},
					"name": "srchosadmi"
				},
				{
					"dataset": {
						"referenceName": "ds_countryLookup",
						"type": "DatasetReference"
					},
					"name": "srclookupCountry"
				},
				{
					"dataset": {
						"referenceName": "DimDate",
						"type": "DatasetReference"
					},
					"name": "srcDimDate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "tgt_Hospital_Admi_Daily",
						"type": "DatasetReference"
					},
					"name": "tgtDaily"
				},
				{
					"dataset": {
						"referenceName": "tgt_Hospital_Weekly",
						"type": "DatasetReference"
					},
					"name": "tgthospitalW"
				}
			],
			"transformations": [
				{
					"name": "lkpCountryCode"
				},
				{
					"name": "selectReqColumns"
				},
				{
					"name": "splitHospWeekly"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "sortCountryDate"
				},
				{
					"name": "deriveWeekYear"
				},
				{
					"name": "aggrStartEndDates"
				},
				{
					"name": "pivotWeekly"
				},
				{
					"name": "lkpDates"
				},
				{
					"name": "sortdate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> srchosadmi",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> srclookupCountry",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> srcDimDate",
				"srchosadmi, srclookupCountry lookup(srchosadmi@country == srclookupCountry@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpCountryCode",
				"lkpCountryCode select(mapColumn(",
				"          country = srchosadmi@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          reported_date = date,",
				"          year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqColumns",
				"selectReqColumns split(indicator == 'Weekly new hospital admissions per 100k' || indicator == 'Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> splitHospWeekly@(Weekly, Daily)",
				"splitHospWeekly@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotDaily",
				"pivotDaily sort(asc(country, true),",
				"     desc(reported_date, true)) ~> sortCountryDate",
				"srcDimDate derive(Year_week_no = year + '-W' + lpad(week_of_year, 2, '0')) ~> deriveWeekYear",
				"deriveWeekYear aggregate(groupBy(year,",
				"          Year_week_no),",
				"     Start_date = min(date),",
				"          End_date = max(date)) ~> aggrStartEndDates",
				"splitHospWeekly@Weekly pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          year_week,",
				"          source),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotWeekly",
				"pivotWeekly, aggrStartEndDates lookup(year_week == Year_week_no,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpDates",
				"lkpDates sort(asc(country, true),",
				"     desc(reported_date, true)) ~> sortdate",
				"sortCountryDate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospital_admission_D.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> tgtDaily",
				"sortdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospital_admission_W.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          year,",
				"          year_week,",
				"          Start_date,",
				"          End_date,",
				"          reported_date,",
				"          population,",
				"          {Weekly new hospital admissions per 100k_count},",
				"          {Weekly new ICU admissions per 100k_count},",
				"          source",
				"     ),",
				"     partitionBy('hash', 1)) ~> tgthospitalW"
			]
		}
	}
}