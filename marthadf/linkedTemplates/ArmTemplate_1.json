{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "marthadf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/tgt_Hospital_Admi_Daily')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tgt_datalake_conn",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "hospital_admission_D.csv",
						"folderPath": "ECDC/HospitalsD",
						"fileSystem": "processed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_Hospital_Weekly')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tgt_datalake_conn",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "hospital_admission_W.csv",
						"folderPath": "ECDC/HospitalsW",
						"fileSystem": "processed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_cases_deaths_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tgt_datalake_conn",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cases_deaths.csv",
						"fileSystem": "stg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_ecdc_all_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tgt_ecdc_all_files",
					"type": "LinkedServiceReference",
					"parameters": {
						"TgtFileName": {
							"value": "@dataset().tgtFileName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"tgtFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().tgtFileName",
							"type": "Expression"
						},
						"folderPath": "ECDC",
						"fileSystem": "stg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_population_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tgt_datalake_conn",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp_src.csv",
						"fileSystem": "stg"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_cases_deaths_file_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy http file cases deaths",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_http_cases_death_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_cases_deaths_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-03-21T09:57:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgt_cases_deaths_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_copy_file_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_file_task",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "v_file_check",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.08:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_population_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_population_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "v_file_check",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "src_population_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.00:02:00",
							"sleep": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-03-20T13:19:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgt_population_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_copy_file_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "v_file_check",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "src_population_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.00:02:00",
							"sleep": 10
						}
					},
					{
						"name": "get_file_meta_data",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "v_file_check",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "src_population_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "if_check_col_cnt",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "get_file_meta_data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('get_file_meta_data').output.columnCount,13)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "fail_msg",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "File issue",
										"errorCode": "File has more columns"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "cp_file_task_1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.08:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "src_population_ds",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "tgt_population_ds",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete_src_file",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "cp_file_task_1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "src_population_ds",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "src_blob_conn",
												"type": "LinkedServiceReference"
											},
											"path": "logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-03-20T13:40:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgt_population_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_copy_file_audit1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_file_task",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.08:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_population_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set variable2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_audit_pipeline]",
							"storedProcedureParameters": {
								"end_dt": {
									"value": {
										"value": "@{formatDateTime(variables('end_dt'),'yyyy-MM-dd HH:mm:ss')}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"p_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"p_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"start_dt": {
									"value": {
										"value": "@{formatDateTime(variables('st_dt'),'yyyy-MM-dd HH:mm:ss')}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"status": {
									"value": "SUCCESS",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "st_dt",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "cp_file_task",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "end_dt",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure1_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set variable2_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_audit_pipeline]",
							"storedProcedureParameters": {
								"end_dt": {
									"value": {
										"value": "@{formatDateTime(variables('end_dt'),'yyyy-MM-dd HH:mm:ss')}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"p_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"p_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"start_dt": {
									"value": {
										"value": "@{formatDateTime(variables('st_dt'),'yyyy-MM-dd HH:mm:ss')}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"status": {
									"value": "FAILED",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set variable2_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "cp_file_task",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "end_dt",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"st_dt": {
						"type": "String"
					},
					"end_dt": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-08T12:16:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgt_population_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_copy_file_audit2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_file_task",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.08:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_population_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set variable2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_audit_pipeline]",
							"storedProcedureParameters": {
								"end_dt": {
									"value": {
										"value": "@{formatDateTime(variables('end_dt'),'yyyy-MM-dd HH:mm:ss')}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"p_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"p_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"start_dt": {
									"value": {
										"value": "@{formatDateTime(variables('st_dt'),'yyyy-MM-dd HH:mm:ss')}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"status": {
									"value": "SUCCESS",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "st_dt",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "cp_file_task",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "end_dt",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure1_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set variable2_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_audit_pipeline]",
							"storedProcedureParameters": {
								"end_dt": {
									"value": {
										"value": "@{formatDateTime(variables('end_dt'),'yyyy-MM-dd HH:mm:ss')}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"p_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"p_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"start_dt": {
									"value": {
										"value": "@{formatDateTime(variables('st_dt'),'yyyy-MM-dd HH:mm:ss')}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"status": {
									"value": "FAILED",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set variable2_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "cp_file_task",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "end_dt",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"st_dt": {
						"type": "String"
					},
					"end_dt": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-08T12:40:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgt_population_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_copy_file_audit4_logging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_file_task",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.08:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_population_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure1_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "cp_file_task",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_audit_pipeline_log]",
							"storedProcedureParameters": {
								"end_dt": {
									"value": {
										"value": "@{activity('cp_file_task').ExecutionEndTime} ",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"error_msg": {
									"value": {
										"value": "@if(\nequals(activity('cp_file_task').Status ,'Succeeded'), 'No Error', activity('cp_file_task').output.errors[0].Message\n)\n\n",
										"type": "Expression"
									},
									"type": "String"
								},
								"p_id": {
									"value": {
										"value": "@{activity('cp_file_task').PipelineRunId} ",
										"type": "Expression"
									},
									"type": "String"
								},
								"p_name": {
									"value": {
										"value": "@{activity('cp_file_task').PipelineName} ",
										"type": "Expression"
									},
									"type": "String"
								},
								"rows_read": {
									"value": {
										"value": "@activity('cp_file_task').output.filesRead\n\n",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"rows_written": {
									"value": {
										"value": "@activity('cp_file_task').output.filesWritten",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"start_dt": {
									"value": {
										"value": "@{activity('cp_file_task').ExecutionStartTime} ",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"status": {
									"value": {
										"value": "@{activity('cp_file_task').Status} ",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "cp_file_task",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "outp",
							"value": {
								"value": "@{activity('cp_file_task').output.errors[0].Message}",
								"type": "Expression"
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"outp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-08T17:15:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgt_population_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ecdc_all_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_paramFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json_param_file",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_in_LkpValue",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_paramFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_paramFile').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy ECDC all files_Iterate",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "src_http_all_files",
											"type": "DatasetReference",
											"parameters": {
												"BaseURL": {
													"value": "@item().SourceBaseURL",
													"type": "Expression"
												},
												"RelativeURL": {
													"value": "@item().sourceRelativeURL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "tgt_ecdc_all_files",
											"type": "DatasetReference",
											"parameters": {
												"tgtFileName": {
													"value": "@item().sinkFileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-03-21T10:42:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgt_ecdc_all_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_cases_deaths')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_cases_deaths",
								"type": "DatasetReference"
							},
							"name": "srcCasesDeaths"
						},
						{
							"dataset": {
								"referenceName": "ds_countryLookup",
								"type": "DatasetReference"
							},
							"name": "srcCountry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_deaths_cases_processed",
								"type": "DatasetReference"
							},
							"name": "tgtCasesDeaths"
						}
					],
					"transformations": [
						{
							"name": "filtercontinent"
						},
						{
							"name": "selectedColumns"
						},
						{
							"name": "pivotCounts"
						},
						{
							"name": "selectForSinkTgt"
						},
						{
							"name": "lkpCountry"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as integer,",
						"          indicator as string,",
						"          daily_count as integer,",
						"          date as date,",
						"          rate_14_day as double,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcCasesDeaths",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcCountry",
						"srcCasesDeaths filter(continent == \"Europe\" && not(isNull(country_code))) ~> filtercontinent",
						"filtercontinent select(mapColumn(",
						"          country,",
						"          country_code,",
						"          population,",
						"          indicator,",
						"          daily_count,",
						"          reported_date = date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> selectedColumns",
						"selectedColumns pivot(groupBy(country,",
						"          country_code,",
						"          population,",
						"          reported_date,",
						"          source),",
						"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
						"     count = sum(daily_count),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> pivotCounts",
						"lkpCountry select(mapColumn(",
						"          country = pivotCounts@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population = pivotCounts@population,",
						"          reported_date,",
						"          {confirmed cases_count},",
						"          deaths_count,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectForSinkTgt",
						"pivotCounts, srcCountry lookup(pivotCounts@country == srcCountry@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpCountry",
						"selectForSinkTgt sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     truncate: true,",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtCasesDeaths"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_emp_type1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "emp_src",
								"type": "DatasetReference"
							},
							"name": "srcemp"
						},
						{
							"dataset": {
								"referenceName": "SqlServer_conn",
								"type": "DatasetReference"
							},
							"name": "empDimLKP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServer_conn",
								"type": "DatasetReference"
							},
							"name": "sinkEmpDim"
						}
					],
					"transformations": [
						{
							"name": "deriveHASHKey"
						},
						{
							"name": "existsHashKey"
						},
						{
							"name": "lkpEmpDim"
						},
						{
							"name": "setDates"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          eno as integer,",
						"          lname as string,",
						"          fname as string,",
						"          deptno as integer,",
						"          salry as float",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcemp",
						"source(output(",
						"          eno as decimal(18,0),",
						"          ename as string,",
						"          deptno as decimal(18,0),",
						"          sal as decimal(10,2),",
						"          ins_date as timestamp,",
						"          upd_date as timestamp,",
						"          hash_key as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> empDimLKP",
						"srcemp derive(Hkey = sha1(toString(eno)+lname+fname+toString(deptno)+toString(salry)),",
						"          ename = lname +' ' + fname) ~> deriveHASHKey",
						"deriveHASHKey, empDimLKP exists(Hkey == hash_key,",
						"     negate:true,",
						"     broadcast: 'auto')~> existsHashKey",
						"existsHashKey, empDimLKP lookup(srcemp@eno == empDimLKP@eno,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpEmpDim",
						"lkpEmpDim derive(ins_date = iif(isNull(ins_date), currentTimestamp(), ins_date),",
						"          upd_date = iif(isNull(upd_date),currentTimestamp(),upd_date)) ~> setDates",
						"setDates alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          eno as decimal(18,0),",
						"          ename as string,",
						"          deptno as decimal(18,0),",
						"          sal as decimal(10,2),",
						"          ins_date as timestamp,",
						"          upd_date as timestamp,",
						"          hash_key as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['eno'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          eno = srcemp@eno,",
						"          ename = deriveHASHKey@ename,",
						"          deptno = srcemp@deptno,",
						"          sal = salry,",
						"          ins_date,",
						"          upd_date,",
						"          hash_key = Hkey",
						"     )) ~> sinkEmpDim"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_hospitals_admi')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_hosp_admi",
								"type": "DatasetReference"
							},
							"name": "srchosadmi"
						},
						{
							"dataset": {
								"referenceName": "ds_countryLookup",
								"type": "DatasetReference"
							},
							"name": "srclookupCountry"
						},
						{
							"dataset": {
								"referenceName": "DimDate",
								"type": "DatasetReference"
							},
							"name": "srcDimDate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt_Hospital_Admi_Daily",
								"type": "DatasetReference"
							},
							"name": "tgtDaily"
						},
						{
							"dataset": {
								"referenceName": "tgt_Hospital_Weekly",
								"type": "DatasetReference"
							},
							"name": "tgthospitalW"
						}
					],
					"transformations": [
						{
							"name": "lkpCountryCode"
						},
						{
							"name": "selectReqColumns"
						},
						{
							"name": "splitHospWeekly"
						},
						{
							"name": "pivotDaily"
						},
						{
							"name": "sortCountryDate"
						},
						{
							"name": "deriveWeekYear"
						},
						{
							"name": "aggrStartEndDates"
						},
						{
							"name": "pivotWeekly"
						},
						{
							"name": "lkpDates"
						},
						{
							"name": "sortdate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as date,",
						"          year_week as string,",
						"          value as double,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srchosadmi",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srclookupCountry",
						"source(output(",
						"          date_key as string,",
						"          date as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          day_name as string,",
						"          day_of_year as string,",
						"          week_of_month as string,",
						"          week_of_year as string,",
						"          month_name as string,",
						"          year_month as string,",
						"          year_week as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcDimDate",
						"srchosadmi, srclookupCountry lookup(srchosadmi@country == srclookupCountry@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpCountryCode",
						"lkpCountryCode select(mapColumn(",
						"          country = srchosadmi@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          indicator,",
						"          reported_date = date,",
						"          year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqColumns",
						"selectReqColumns split(indicator == 'Weekly new hospital admissions per 100k' || indicator == 'Weekly new ICU admissions per 100k',",
						"     disjoint: false) ~> splitHospWeekly@(Weekly, Daily)",
						"splitHospWeekly@Daily pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          source),",
						"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> pivotDaily",
						"pivotDaily sort(asc(country, true),",
						"     desc(reported_date, true)) ~> sortCountryDate",
						"srcDimDate derive(Year_week_no = year + '-W' + lpad(week_of_year, 2, '0')) ~> deriveWeekYear",
						"deriveWeekYear aggregate(groupBy(year,",
						"          Year_week_no),",
						"     Start_date = min(date),",
						"          End_date = max(date)) ~> aggrStartEndDates",
						"splitHospWeekly@Weekly pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          year_week,",
						"          source),",
						"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> pivotWeekly",
						"pivotWeekly, aggrStartEndDates lookup(year_week == Year_week_no,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpDates",
						"lkpDates sort(asc(country, true),",
						"     desc(reported_date, true)) ~> sortdate",
						"sortCountryDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['hospital_admission_D.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtDaily",
						"sortdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['hospital_admission_W.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          year,",
						"          year_week,",
						"          Start_date,",
						"          End_date,",
						"          reported_date,",
						"          population,",
						"          {Weekly new hospital admissions per 100k_count},",
						"          {Weekly new ICU admissions per 100k_count},",
						"          source",
						"     ),",
						"     partitionBy('hash', 1)) ~> tgthospitalW"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgt_Hospital_Admi_Daily')]",
				"[concat(variables('factoryId'), '/datasets/tgt_Hospital_Weekly')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_test_pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_cases_deaths",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as integer,",
						"          indicator as string,",
						"          daily_count as short,",
						"          date as date,",
						"          rate_14_day as double,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          country,",
						"          country_code,",
						"          population,",
						"          indicator,",
						"          daily_count,",
						"          date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 pivot(groupBy(country,",
						"          country_code,",
						"          population,",
						"          date,",
						"          source),",
						"     pivotBy(indicator),",
						"     count = sum(daily_count),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as string,",
						"          indicator as string,",
						"          daily_count as string,",
						"          date as string,",
						"          rate_14_day as string,",
						"          source as string",
						"     ),",
						"     partitionFileNames:['test_pivot.csv'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_emp_scd1_audit3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_emp_type1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_emp_type1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcemp": {},
									"empDimLKP": {},
									"sinkEmpDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Stored procedure1_copy1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set variable1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_audit_pipeline]",
							"storedProcedureParameters": {
								"end_dt": {
									"value": {
										"value": "@{formatDateTime(variables('end_dt'),'yyyy-MM-dd HH:mm:ss')}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"p_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"p_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"start_dt": {
									"value": {
										"value": "@{formatDateTime(variables('st_dt'),'yyyy-MM-dd HH:mm:ss')}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"status": {
									"value": "FAILED",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "st_dt",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "df_emp_type1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "end_dt",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1_copy1_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "df_emp_type1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "end_dt",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Stored procedure1_copy1_copy1",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_audit_pipeline]",
							"storedProcedureParameters": {
								"end_dt": {
									"value": {
										"value": "@{formatDateTime(variables('end_dt'),'yyyy-MM-dd HH:mm:ss')}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"p_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"p_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"start_dt": {
									"value": {
										"value": "@{formatDateTime(variables('st_dt'),'yyyy-MM-dd HH:mm:ss')}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"status": {
									"value": "SUCCESS",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ScriptPROC",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set variable1_copy1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "exec sp_audit_pipeline @p_name='@{pipeline().Pipeline}', @p_id='@{pipeline().RunId}',@status='SUCCESS', @start_dt= '2025-04-08 12:31:18',@end_dt='2025-04-08 13:39:18'\n\n\n\n\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00",
							"logSettings": {
								"logDestination": "ExternalStore",
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "logs"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"st_dt": {
						"type": "String"
					},
					"end_dt": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-08T14:33:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_emp_type1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_hospital_W_D')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_hospitals_admi_w_d",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_hospitals_admi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srchosadmi": {},
									"srclookupCountry": {},
									"srcDimDate": {},
									"tgtDaily": {},
									"tgthospitalW": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-03-25T11:12:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_hospitals_admi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_processed_casesdeaths_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_processed_cases_deaths",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_cases_deaths",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcCasesDeaths": {},
									"srcCountry": {},
									"tgtCasesDeaths": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-03-24T13:39:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_cases_deaths')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_test_pivot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_test_pivot",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_test_pivot",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-03-25T03:57:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_test_pivot')]"
			]
		}
	]
}